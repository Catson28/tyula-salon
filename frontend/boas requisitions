```
import React, { useState } from 'react';
import 'bootstrap/dist/css/bootstrap.min.css';
import AddCategory from './../../partials/category/add-category.component';
import CategoriesList from './../../partials/category/categories-list.component';

const AllBeauty: React.FC = () => {
  const [showCategoryForm, setShowCategoryForm] = useState<boolean>(false);
  const [showCategoriesList, setShowCategoriesList] = useState<boolean>(false);


  const handleCategoryClose = () => {
    setShowCategoryForm(false);
    setShowCategoriesList(false);
  };

  const handleCategoriesListClick = () => {
    handleCategoryClose();
    setShowCategoriesList(true);
  };
  
  const handleAddCategoryClick = () => {
    handleCategoryClose();
    setShowCategoryForm(true);
  };

  const handleFormCategorySubmit = () => {
    setShowCategoryForm(false);
  };

  return (
    <div className="container-fluid">
      <div className="container">
        <div className="btn-toolbar justify-content-between p-2" role="toolbar" aria-label="Toolbar with button groups">
          <h2 id="vertical-variation">Lista de tutoriais<a className="anchorjs-link " aria-label="Anchor" data-anchorjs-icon="#" href="#vertical-variation"></a></h2>
          <button type="button" className="btn btn-primary" onClick={handleCategoriesListClick}>Abrir</button>
          <button type="button" className="btn btn-primary" onClick={handleAddCategoryClick}>Adicionar</button>
        </div>
        {showCategoryForm && (
          <AddCategory onClose={handleCategoryClose} />
        )}
        {showCategoriesList && (
          <CategoriesList onClose={handleCategoryClose} />
        )}
      </div>
    </div>
  );
};

export default AllBeauty;

```



criar 

```tsx

import AddCategory from './../../partials/category/add-category.component';
import CategoriesList from './../../partials/category/categories-list.component';
```



add-category.component.tsx

```tsx
import React, { Component, ChangeEvent } from "react";
import CategoryDataService from "../../../services/net/category.service";
import ICategoryData from '../../../services/types/category.type';

type Props = {
  onClose: () => void;
};

type State = ICategoryData & {
  submitted: boolean
};

export default class AddCategory extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.onChangeTitle = this.onChangeTitle.bind(this);
    this.onChangeDescription = this.onChangeDescription.bind(this);
    this.saveCategory = this.saveCategory.bind(this);
    this.newCategory = this.newCategory.bind(this);

    this.state = {
      id: null,
      title: "",
      description: "",
      published: false,
      submitted: false
    };
  }

  onChangeTitle(e: ChangeEvent<HTMLInputElement>) {
    this.setState({
      title: e.target.value
    });
  }

  onChangeDescription(e: ChangeEvent<HTMLInputElement>) {
    this.setState({
      description: e.target.value
    });
  }

  saveCategory() {
    const data: ICategoryData = {
      title: this.state.title,
      description: this.state.description
    };

    CategoryDataService.create(data)
      .then((response: any) => {
        this.setState({
          id: response.data.id,
          title: response.data.title,
          description: response.data.description,
          published: response.data.published,
          submitted: true
        });
        console.log(response.data);
      })
      .catch((e: Error) => {
        console.log(e);
      });
  }

  newCategory() {
    this.setState({
      id: null,
      title: "",
      description: "",
      published: false,
      submitted: false
    });
  }

  render() {
    const { submitted, title, description } = this.state;

    return (
      <div className="submit-form">
        {submitted ? (
          <div>
            <h4>You submitted successfully!</h4>
            <button className="btn btn-success" onClick={this.newCategory}>
              Add
            </button>
          </div>
        ) : (
          <div>
            <div className="form-group">
              <label htmlFor="title">Title</label>
              <input
                type="text"
                className="form-control"
                id="title"
                required
                value={title}
                onChange={this.onChangeTitle}
                name="title"
              />
            </div>

            <div className="form-group">
              <label htmlFor="description">Description</label>
              <input
                type="text"
                className="form-control"
                id="description"
                required
                value={description}
                onChange={this.onChangeDescription}
                name="description"
              />
            </div>

            <button onClick={this.saveCategory} className="btn btn-success">
              Submit
            </button>
            <button className="btn btn-primary" onClick={this.props.onClose}>Fechar</button>
          </div>
        )}
      </div>
    );
  }
}

```



categories-list.component.tsx

```tsx
import React, { Component, ChangeEvent } from "react";
import CategoryDataService from "../../../services/net/category.service";
import { Link } from "react-router-dom";
import ICategoryData from '../../../services/types/category.type';

type Props = {
  onClose: () => void;
};

type State = {
  categories: Array<ICategoryData>,
  currentCategory: ICategoryData | null,
  currentIndex: number,
  searchTitle: string
};

export default class CategoriesList extends Component<Props, State>{
  constructor(props: Props) {
    super(props);
    this.onChangeSearchTitle = this.onChangeSearchTitle.bind(this);
    this.retrieveCategories = this.retrieveCategories.bind(this);
    this.refreshList = this.refreshList.bind(this);
    this.setActiveCategory = this.setActiveCategory.bind(this);
    this.removeAllCategories = this.removeAllCategories.bind(this);
    this.searchTitle = this.searchTitle.bind(this);

    this.state = {
      categories: [],
      currentCategory: null,
      currentIndex: -1,
      searchTitle: ""
    };
  }

  componentDidMount() {
    this.retrieveCategories();
  }

  onChangeSearchTitle(e: ChangeEvent<HTMLInputElement>) {
    const searchTitle = e.target.value;

    this.setState({
      searchTitle: searchTitle
    });
  }

  retrieveCategories() {
    CategoryDataService.getAll()
      .then((response: any) => {
        this.setState({
          categories: response.data
        });
        console.log(response.data);
      })
      .catch((e: Error) => {
        console.log(e);
      });
  }

  refreshList() {
    this.retrieveCategories();
    this.setState({
      currentCategory: null,
      currentIndex: -1
    });
  }

  setActiveCategory(category: ICategoryData, index: number) {
    this.setState({
      currentCategory: category,
      currentIndex: index
    });
  }

  removeAllCategories() {
    CategoryDataService.deleteAll()
      .then((response: any) => {
        console.log(response.data);
        this.refreshList();
      })
      .catch((e: Error) => {
        console.log(e);
      });
  }

  searchTitle() {
    this.setState({
      currentCategory: null,
      currentIndex: -1
    });

    CategoryDataService.findByTitle(this.state.searchTitle)
      .then((response: any) => {
        this.setState({
          categories: response.data
        });
        console.log(response.data);
      })
      .catch((e: Error) => {
        console.log(e);
      });
  }

  render() {
    const { searchTitle, categories, currentCategory, currentIndex } = this.state;

    return (
      <div className="list row">
        <div className="col-md-8">
          <div className="input-group mb-3">
            <input
              type="text"
              className="form-control"
              placeholder="Search by title"
              value={searchTitle}
              onChange={this.onChangeSearchTitle}
            />
            <div className="input-group-append">
              <button
                className="btn btn-outline-secondary"
                type="button"
                onClick={this.searchTitle}
              >
                Search
              </button>
            </div>
          </div>
        </div>
        <div className="col-md-6">
          <h4>Categories List</h4>

          <ul className="list-group">
            {categories &&
              categories.map((category: ICategoryData, index: number) => (
                <li
                  className={
                    "list-group-item " +
                    (index === currentIndex ? "active" : "")
                  }
                  onClick={() => this.setActiveCategory(category, index)}
                  key={index}
                >
                  {category.title}
                </li>
              ))}
          </ul>

          <button
            className="m-3 btn btn-sm btn-danger"
            onClick={this.removeAllCategories}
          >
            Remove All
          </button>
        </div>
        <div className="col-md-6">
          {currentCategory ? (
            <div>
              <h4>Category</h4>
              <div>
                <label>
                  <strong>Title:</strong>
                </label>{" "}
                {currentCategory.title}
              </div>
              <div>
                <label>
                  <strong>Description:</strong>
                </label>{" "}
                {currentCategory.description}
              </div>
              <div>
                <label>
                  <strong>Status:</strong>
                </label>{" "}
                {currentCategory.published ? "Published" : "Pending"}
              </div>

              <Link
                to={"/categories/" + currentCategory.id}
                className="badge badge-warning"
              >
                Edit
              </Link>
            </div>
          ) : (
            <div>
              <br />
              <p>Please click on a Category...</p>
            </div>
          )}
          <button className="btn btn-primary" onClick={this.props.onClose}>Fechar</button>
        </div>
      </div>
    );
  }
}

```

agora 

```tsx
import CategoryDataService from "../../../services/net/category.service";
import ICategoryData from '../../../services/types/category.type';
```





category.type

```tsx
export default interface ICategoryData {
    id?: any | null,
    title: string,
    description: string,
    published?: boolean,
  }
```

